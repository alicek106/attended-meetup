데브시스터즈
발표 내용 슬라이드 : https://www.slideshare.net/seungyongoh3/ndc17-kubernetes

개발환경 하나만 있으면 모든 사람들이 함께 개발하기가 어려움
개발 서버를 두개로 띄우면? 그래도 소화할 수 있는 양은 적고, 그렇다고 해서 세대를 띄우는것도 말이 안됨.
서버의 용도 불분명. 언제 이걸 삭제하고 생성? 용도는 무엇? 
요구 사항 : 원할 때 서버 환경을 여러 개 띄울 수 있어야 함. (원하는 버전, 목적, 메타데이터 쉽게 확인 가능해야 함)

개발 서버 외에도 디비, 로깅, 스케줄러 등등을 함께 넣어서 서버로서 구현.
웹에서 런칭하는 것으로. EC2 서버를 관리하는 것도 힘들고. 추가 개발 환경 필요할 때마다 새로? -> 그건 좀 아니다.
오케스트레이션 툴 도입의 고려.

--
EC2 (AWS에 락인 됨), Swarm mode(심플, 기능 부족), k8s 세 개 고려. 
네임스페이스를 통해 개발 환경 프로비저닝.

AWS를 주로 쓰고 있음. etcd를 따로 별도의 서버로 둠. ASG랑 묶어서. kubeadm 쓰고 있음.

--
개발자뿐만 아니라 QA도 서버를 올리고 내릴 수 있음. 각 서버의 정체성도 명확해짐. 

여전히 복잡한 셋업 과정. 리눅스는 괜찮아도 윈도우는 아직도 힘들다.


--------
유정열 (쿠버네티스 GitOps)

Jenkins -> 로 해도 헬름 차트 만들고 푸시하고 다 잘 됨.
배포 대상 변경, 환경 변수 변경, 롤백? 대규모장애?.. 
(배포 승인의 경우 슬랙으로 링크 주고 그걸 누르면 젠킨스 사이트 (process) 로 연결)

GitOps의 핵심 : 코드로 표현한 환경. 

이점? : 안정성 (변경사항 추적 가능. 누가, 언제, 무엇을 언제?)
배포 롤백도 되고. 

개발 푸시 -> 웹훅 -> 젠킨스 -> 이미지 푸시.

도커 허브 이미지 빌드가 너무 느리다. 그래서 Circle CI에서 빌드함. CI/CD 를 위한 Circle Ci를 나눴음.

룰을 YAML로 정의 (2명 이상 approve 등 시, 자동으로 머지 (mergify))

버저닝? 패치 시 자동 증가. 메타데이터는 PR 번호.


