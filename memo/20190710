1. 당근마켓 채용중

테라폼으로 글로벌 서비스 구성하기. -DRY 체험기?

중복 피하기를 어떻게 겪었고, 어떻게 해결했는지. (최상기) 스푼인프라는 3분이서.
음성으로 고객들에게 가치를 주는 서비스. 개인 오디오 라이브 스트리밍 모바일 플랫폼. 특징 10~20대 타겟팅.
세계로 서비스중 5곳.

테라폼으로 글로벌 서비스를 해보니. 중복된 코드들이 대부분이었음. WET (클린하지 않은). Write Everything Twice.
이렇게 하기보다는 DRY : Don't REPEAT Yourself 로. 최대한 중복을 피하자. 품질, 무결성 확보 등등. 읽기 쉽고, 재활용 가능.
이런걸 다 얻었는지는 잘 모르겠다고 함. 아직도 진행중.

요구사항
보통 인프라 구조는 거의 비삿하다. 어느 서비스를 제공하든지 여러 인프라를 여러번 만들어내는것. 네이밍 규칙, IPRANGE같은것만 변경되고 나머지는 대동소이.
보안, 인퓨라 효율성ㅂ돠는 어떻게 서비스가 스피디하게 나갈 수 있는지를 인프라 코드 구성. 수정해야 할 부분이 많다.
내부적으로 검토 후, AWS 코드로 구성. 레거시 인프라를 코드화로 딜리버리 중.

인프라 구성 도구? 모두 코드로 인프라를 구성함. 코드 테라폼을 씀. 그것만으로 부족한 부분은 테라그런트 씀. Terragrunt. Packer나 앤서블로 이미지 관리.
설정 관리는 앤서블 씀. CI/CD Jenkins, AWX 를 쓴다 (CICD)

phase 1 - Terraform.
인프라 생성 변경 설정 등을 코드로 관리. IaC. 인프라 생산성 훨씬 높일 수 있음. 서비스가 바뀔 때 빠르게 대응할 수 있는가. 결국은 코드로 인프라로 구성하면 불확실성에 대한 유연함이 가능.
빨리 Try, 경험, 시도 를 빠르게 해서 도입하는게 맞는것도 맞을 수 있음. 레퍼런스도 많고.
별거 없었음 그냥 해보자..
시작 -> 네트워크 환경을 만든다. 간략하게 네트워크는 100~150줄로 가능함.
5개국가, 3개 인프라 -> 15개 인프라 환경 구성관리를 각각 메뉴얼하게 할 수 는 없음. 단 순 리소스 나열만으로는 15벌 인프라 전개 불가능
비슷한 리소스의 중복 발생..

Phase 2 모듈 -> 데이터를 변수처리한 리소스 구성파일 묶음
다른 클라우드를 쓰다가 AWS를 하면 쉽게 모듈을 만들수 있다. 근데 해보면 만만치 않다. 리소스 간의 버저닝도 불가능. 다른 모듈이 다른 모듈 참조할때 버전이 안맞으면 그것도 고역임. 리소스는 ㅁ버저닝이 안되지만 모듈은 버저닝이 가능. 

하시코프에서 제공하는 AWS 모듈을 사용했음. Terraform aws modules . 기본 모듈은 재활용하고. 루트모듈 / 서브모듈 각각 만들어서 쓴다. 이렇게 하면 일단 코드중복 조금은 피할 수 있음.

prod, stage 를 따로따로 만들다보면 어쨌든 main.tf 등은 duplicated 된다. 그래서 또 중복된다. 해결법 : 파라미터 파일을 통해 설정할 수도 있는데, 그것보다 명확하게? 

세상에 공짜는 없다. multiple env에서 중복 발생. main.tf / var.tf 등. 5ro rnrrk, 3roghksrud rntjddp eogks wndqhrdms rmeofh.

dhvmsthtm ahebfeh rufrnr dlqaktdp akwrp tnwjdgkrp ehlsek. 

Phase 3 : Terrafrunt. 테라그런트를 사용하면 이런걸 해결할 수 있다. 그런트워크에서 개발. 테라폼을 래퍼로. 단순한 인프라는 테라폼으로도 충분하다.
근데 커지면 모듈간의 연관관계 중복발생 -> 테라그런트 쓰는게 좋음. (하나리전이면 상관없을수도). 모듈간의 코드중복 최소화. 종속관계 제거.

도커 -> 쿠버네티스, 테라폼 -> 테라그런트. 

kor, jpn, usa 등등 해서 tfvars 파일을 만든다. 결국 코드와 데이터의 분리. 글로벌 로컬 variable. 등등.. Data driven Design. 코드와 데이터의 분리.

테라그런트의 편하거나? 불편한 모듈은 output 참조? 다른 모듈의 값을 다른 모듈에서 참고. 
Dependency 모듈간의 종속성? dependency를 수정의할 수 있음 타레그런트 up-all. 근데 뭐 하나 변경해서 삭제하려고 하면 전부 다 함께 줄줄이 삭제하려고 함.

Git Versioning. 
모듈리포. 서비스 리포 (환경이 변해도 바뀌지 않음). 실제로 바꾸니느 것은 변수 파일만 잘 관리를 하면 된다 -> 타리그런트 리포. 각각 서비스 지역에 따라서만.
나름대로 중복을 피해서.

--
그래도 ㄲ고민? 인프라 구성이 빠르진 않음. 코드로 만든다? 숙련되지 않은사람? -> 반나절.. 손으로 하면 빠른데 이걸 굳이 해야하나 등등..
테라폼 엔터프라이즈에서는 테라그런트에서 제공하는 기능들을 제공한다던데... 엔터프라이즈는 사용하기 어려움........

숙제? CI 파이프라인은 아직ㄷ ㅏ못만들었고. 프로덕션 환경 적용 후 리소스 삭제 방지 (리라이프샅이클?)

tfstate 파일 시각화. 테라보드 도입함.

데이터 시큐리티. ssh키나 비밀번호. vault, consul 등을.. 도입해야할듯.

정리 -> 상용수준의 인프라를 구성하고 운영하는건 어려움. 이상과 현실은 다름. 
기본디자인을 잘 하지 않으면 스파게티 코드가 된다. 한 곳에 너무 많은 리소스를 정의 안하고, 독립적으로 단순하게 해서 DRY를 실천하자 (물라 ㄴ잘 되지는 않음)

이게 맞는지 다들 헷갈려함. 이게 맞는건가? 
팅ㅁ이 의지가 없으면 하지 말자. 유지되기 어려움. 관리 안되면 허사. 

이전에는 1주일 딜리버리. 지금은 반나절이면 끝남. 테스트 환경까지 전부 자동화.

----


Jay Kim. Advanced Terraform.

삼성페이. 빅스비 등.

Advanced ? -> Prod 레벨에서 테라폼을 사용하는 방법. 아젠다 : 어떻게 구조를 가져갈지, CICD 파이프라인 등에 어떻게 가져갈건가.

Tip ? symlink 를 만들면 편하다. terraform.

Prod 에 적용할 때 변경하는게 뭔지 두려울지도. terraform landscape를 쓰면 좋음.

terraform fmt command -> 예쁘게 할 때. 오토 인덴트 등등 알아서 해주는듯. terraform fmt 명령어 또는 check. 문법 어긋나는지 등등.

--

workflow : 여러 국가에서 같은 테라폼을 쓸 때. remote state를 하되, state locking을 하면 변경에 대한 동기화. 가장 기본적인. 아틀란티스 오픈소스나 테라폼 엔터프라이즈를 쓰면 좋음.

아틀란티스 설명. 깃에서 플랜을 떠주고 (PR나오면). 그리고 apply 하면 apply가 된다. (움짤)
플랜, apply 등을 동일한 환경에서 하도록. (로걸에서 머지학 ㅗ그러면 귀찮으니까.)
테라폼 엔터프라이즈. 최근에 구입했다고..?

2~34명이면 아틀란티스 할 필요도 없이 .. 그런데 사람이 많으면 아틀란티스 쓰고, 돈까지 있다 하면 엔터프라이즈 쓰면 됨.

--

모듈 테라폼 -> 누구나 커스터마이즈 하기 위해서 너무 불필요한 파일이 많다.. 모듈은 직접 만드는게 좋음. 
변수를 통해서 모듈에 넣어주고, 필요한 것만 아웃풋으로 잘 가져와서 쓰면 됨. 

모듈도 계층적으로 만들수가 있다. 4단계.. 까지도 가능. 예를 들어 최상위 두개만 생성하면 엄청 편하긴 할텐데, 새 데브옵스 개발자가 들어오면 읽기가 힘드니
뎁스를 적당히만 하는 것을 권장. 

--

디렉터리에 대한 디자인. 두 가지 방식 -> 모놀로식, 마이크로서비스 형태 식.
모듈 별로 레파지터리를 쪼개는 방식

모놀로식 : AWS의 디자인을 잘 따라가면 됌. 글로벌 -> IAM, 리전은 리전 별로, 그 아래에서는 다시.. 그런 식으로. 그리고 중복되는 것들은 심볼릭 링크를 쓰면 좋음.
글로벌, 로컬 변수는 모두 시

msa는 각각 리포를 갖게 하고, ㅁ빌링, 등을 깃허브로 관리. 

유지보수 측면에서. 마이크로서비스 디자인이 훨씬 낫다. 근데 모두가 함께 갈거라면 모놀리가 낫겠지만 그럴리는 없겠지.-- 디자인 관련

-- 
CICD 파이프라인.

Pull? 인스턴스가 앤서블 코드를 가져와서 디플로이 하는 방식이 가능한 듯?아 cron으로. 앤서블의 변경사항을 체크.
쉘스크립트에서 가져와서 앤서블을 가져올 때 그걸 넣어준다. 태그로 쭉 구분을 해서. 

spinnaker도 연동해서 쓸 수 있고.

블루그린 디플로이를 테라폼만으로도 가능함. 테라폼 워크스페이스로 사용 가능. 이걸로 블루 그린을 만들 수 있고.
테라폼 워크스페이스를 가져올 수가 있음. 스위칭 하는 방법도 가능. 

-- 멀티 클라우드?
결국은 AWS, GCP를 따로 만들어줘야함. 엔터프라이즈는 해준다는데.. 잘은 모르겠음. 그렇지만 클라우드의 철학이 각각다르니 결국 따로 해줘야함.구글은 기능이 아직 안되는것도 많음..

-----

IaC 성공적으로 정착시키기. 네오위즈.

2017년부터 시작. AWS 기반 서비스 인프라 전체 코드화. 작업 환경 구성. 로그인 방식 및 권한관리.

리눅스, 윈도우까지 앤서블로 프로비저닝.

구현 방식? 소규모에서는 vault보다는 시크릿 매니저, 앤서블 패커 테라폼 awscli 등등..

각 지역 인프라 별로 깃 프로젝트를 만들어줌.
--
이전에는 ? 심지어 개발 환경에 쓰던 계정을 그대로 운영으로 가져오는 경우도..

테스트 환경 구성 할때도..

액세스 키 유출됬을 때에도..

--
성공적인 구현을 위한 조건 ? 조직 문화가 첫 번째. Git을 제대로 익히고 활용해야 함....
도구 간 코드 의존성 최소화? -> Dynamic Inventory 해라..

---
자동화로 얻을수 있는 것은 스피드, 퀄리티, 비용.
