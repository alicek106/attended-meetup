도커 도입 시 어려운 점?

도커 도입 시, fluentd -> 마이그레이션 중인데.. 그럼 어떻게 테스트 파이프라인 구축? 유닛 테스트를 구현을 해야 하는데, 그걸 어떻게 해야하는가?
사전에 빌드 시간도 줄일 수 있으면 좋을텐데, 소스코드를 도커 볼륨 마운트 해서 stateless 하게 쓸 수도 있음.

동시 혁신을 제한? -> 중요한 것만 하자 라는 이야기. 완전 자동화된 CI/CD 를 처음부터 만들어 둘 필요는 없음. 스케일링을 벌써부터 생각하는 것도 무리임.
우선은 stateless한 앱 먼저 컨테이너로 만들어 나가는 것이 좋음. 
컨테이너가 Silver Bullet은 아니다.

컨테이너에서 레거시 앱은 돌아 가는데, 윈도우가 아닌 이상은 다 돌아가는데. 맨 처음부터 MSA같은거 생각하면 안된다.. 
가장 첫 목표는 containerize 하는 것이 가장 큰 목표임. 가장 MVP는, 가장 중요한건 레거시의 도커 화.

---
Dockerfile -> 실행 되는지, 로깅 되는지, 문서화, 다른 사람이 쉽게 사용한지.  
데이터 로깅은 어떻게? STD OUT, ERR를 어떻게 처리할 것인가도 고려해야 할 부분임. 그냥 외부 솔루션을 써도 되지만..
액세스 로그 등을 STD OUT으로 할 수는 없으니.. 
---
도커파일 안티패턴?
latest 이미지는 쓰지 마라. 특정 태그 이름을 무조건 붙여줘라. apt install도 버전 붙여줘라.
설정 파일도 ENV로 Dockerfile에 제대로 명시해라. Entrypoint도 기본 설정 업데이트 해라.
Entrypoint는 Gradle 플러그인 쓰면 자동으로 Dockerfile 만들어주고 entrypoint 만들어 주는듯.

Dockerfile이 더러워지지 않도록 주의해라. Github에서 검색해서 사용하는 것도 나쁘지는 않음.

---
베어메탈을 쓸건지, 가상 머신을 쓸건지 둘 중 하나만 선택해라. 어느 것을 써도 사실 상관은 없다.

---
Docker Swarm ? Kubernetes ? 
-> Docker Swarm 대신 ECS에 대해서... ECS가 단순하니까 다들 많이 쓰는듯. 
쿠버네티스는 아예 클러스터 매니저가 따로 있어야 할 수도 있음? ... 쿠버네티스는 오버엔지니어링이 되기 쉽다. 너무 어려움.

---
TA와 이미지 배포? -> 개발자들은 개발만 하고, 보안 하시는 분들은 거버넌스 만들고 등을 어떻게 할 지를.
DevOps 는 파이프라인 만들고, CICD ... 하든지. 너무 경계가 모호해진다. 사람이 바뀐다기보다는 .... 역할이 바뀐다. 개발자는 코드만 집중하는 상황으로.
개발자는 아예 이미지 푸시 조차도 못한다. 인프라 개발자들이 밥그릇이 없어진다고 생각을 할 수는 있으나... 역할이 바뀌는 것이라고 생각하는 것이 좋을듯.
---

stateless한 이야기들은 가축이 아니고 pet이 아니다. 노드들에 올라오고 내려올 수 있다는 것을 생각해야 한다.
잘 만들어진 것 가져다 쓰는 것이 좋다. 

-- 오케스트레이터가 있어야 할까?
VM 당 하나의 컨테이너도 생각해 볼 필요가 있음.

---
쿠버네티스는 러닝 커브가 너무 깊다. ECS에 비해서 너무.. 그거에 비해서 기능은 많이 제공해주긴 함.
개발자, 관리자 모두........ 각 역할을 잘 나눠서. (어떤 사람은 스웜이 좋을수도 있고. 어느 것이 좋은지는 회사 문화에 따라서)
목적에 따라서 적절하게 선택하는 것이..
---

Beanstalk vs ECS. 빈스톡은 이미지 꾸워서 나가는 시간도 느리고, 에러 체킹도 힘들다.
빈스톡은 클라우드포메이션으로 할수는 있지만, 바꾸기가 쉽지 않았다. 빈스톡은 플랫폼을 선택해서 들어감.
배포하고 에러 받는 시간이 너무 느리다.
